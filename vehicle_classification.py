# -*- coding: utf-8 -*-
"""Vehicle-Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZsfOxJztFkwCtTCmrMpW-IwrDIamx52u

# Prepare Dataset and Tools

**IMPORTS**
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sbn
from keras.utils import np_utils

#Sk-learn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelBinarizer, normalize
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.metrics import classification_report, multilabel_confusion_matrix
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier

"""**Extract Feature**"""

class CarClass:

  def __init__(self, dfs):
    self.dataframe = dfs
    self.dataset   = self.extractFeatures()
    self.target    = dfs["label"]
    self.classes   = ["suv", "sedan", "bus", "microbus", "truck", "minivan"]
    self.features  = ["width", "height", "ratio", "area"]

  def extractFeatures(self):
    width     = abs(self.dataframe["x2"] - self.dataframe["x1"])
    height    = abs(self.dataframe["y2"] - self.dataframe["y1"])
    ratio     = height / width
    area      = width * height
    diameter  = np.sqrt(width**2 + height**2)
    np.set_printoptions(precision=2, suppress=True)
    return np.array((width, height, diameter, ratio, area)).transpose()

"""**Read Dataset from Comma-Seperated Value file**"""

file_path = "cars-labeled.csv"
dfs       = pd.read_csv(file_path)

car_dataset   = CarClass(dfs)
dataset_train, dataset_test, target_train, target_test = train_test_split(car_dataset.dataset, 
                                                                          car_dataset.target, 
                                                                          random_state=0) 

encoded_train_target = LabelBinarizer().fit(target_train).transform(target_train)
encoded_test_target  = LabelBinarizer().fit(target_test).transform(target_test)

"""**Plot Result of Classifiers**"""

def plotResult(targets, predicts, encoded=False):
  if encoded:
    targets  = np.argmax(targets, axis=1)
    predicts = np.argmax(predicts, axis=1)

  CM = confusion_matrix(targets, predicts, normalize="true")

  sbn.heatmap(CM, annot=True, fmt=".2f", xticklabels=car_dataset.classes, yticklabels=car_dataset.classes)
  print("\nAccuracy:")
  print(accuracy_score(targets, predicts, normalize=True))

  print("\nConfusion Matrix:")
  plt.show()

"""# Classifiers Section

**Decision Tree**
"""

clf = DecisionTreeClassifier(max_depth = 3, random_state = 0)
clf.fit(dataset_train, target_train)
clf.predict(dataset_test)

fig, axes = plt.subplots(nrows = 1,ncols = 1,figsize = (10,10), dpi=300)

tree.plot_tree(clf,
               feature_names = car_dataset.features, 
               class_names = car_dataset.classes,
               filled = True);

"""**Random Forest**"""

rf = RandomForestClassifier(n_estimators=100,
                            random_state=0).fit(dataset_train, encoded_train_target)
predicts = rf.predict(dataset_test)
plotResult(encoded_test_target, predicts, True)

"""**MLP Classifier**"""

mlp = MLPClassifier(activation="relu", solver="adam", random_state=1, max_iter=300).fit(dataset_train, encoded_train_target)
predicts = mlp.predict(dataset_test)

plotResult(encoded_test_target, predicts, True)

"""**K-Nearest Neighbors Classifire**"""

neigh = KNeighborsClassifier(n_neighbors=3).fit(dataset_train, encoded_train_target)
predicts = neigh.predict(dataset_test)

plotResult(encoded_test_target, predicts, True)

"""**C-Support Vector Classification.**"""

svc = make_pipeline(StandardScaler(), SVC(kernel='rbf', gamma='auto', C=100)).fit(dataset_train, target_train)
predicts = svc.predict(dataset_test)
plotResult(target_test, predicts, False)

"""**Logistic Regression**"""

logistic_regression = LogisticRegression(max_iter=1000).fit(dataset_train, target_train)
predicts            = logistic_regression.predict(dataset_test)
plotResult(target_test, predicts, False)

"""**Naive Bayes Classifier**"""

GNB      = GaussianNB().fit(dataset_train, target_train)
predicts = GNB.predict(dataset_test)
plotResult(target_test, predicts, False)

"""**AdaBoost Classifier**"""

ABC      = AdaBoostClassifier(n_estimators=60).fit(dataset_train, target_train)
predicts = ABC.predict(dataset_test)

plotResult(target_test, predicts, False)